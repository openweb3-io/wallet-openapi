/*
 * Wallet OpenAPI Documentation
 * This is a custody wallet service openapi server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.wallet.internal.api;

import io.openweb3.wallet.internal.ApiCallback;
import io.openweb3.wallet.internal.ApiClient;
import io.openweb3.wallet.internal.ApiException;
import io.openweb3.wallet.internal.ApiResponse;
import io.openweb3.wallet.internal.Configuration;
import io.openweb3.wallet.internal.Pair;
import io.openweb3.wallet.internal.ProgressRequestBody;
import io.openweb3.wallet.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.wallet.models.Error;
import io.openweb3.wallet.models.SweepAddressRequest;
import io.openweb3.wallet.models.SweepAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SweepFundsApi {
    private ApiClient localVarApiClient;

    public SweepFundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SweepFundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1SweepAddress
     * @param address Address that funds will be swept from (required)
     * @param sweepAddressRequest Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SweepAddressCall(String address, SweepAddressRequest sweepAddressRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sweepAddressRequest;

        // create path and map variables
        String localVarPath = "/api/v1/sweep/address/{address}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "SignatureAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1SweepAddressValidateBeforeCall(String address, SweepAddressRequest sweepAddressRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling v1SweepAddress(Async)");
        }
        
        // verify the required parameter 'sweepAddressRequest' is set
        if (sweepAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'sweepAddressRequest' when calling v1SweepAddress(Async)");
        }
        

        okhttp3.Call localVarCall = v1SweepAddressCall(address, sweepAddressRequest, _callback);
        return localVarCall;

    }

    /**
     * Sweep address
     * Sweep funds from a single address
     * @param address Address that funds will be swept from (required)
     * @param sweepAddressRequest Request (required)
     * @return SweepAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public SweepAddressResponse v1SweepAddress(String address, SweepAddressRequest sweepAddressRequest) throws ApiException {
        ApiResponse<SweepAddressResponse> localVarResp = v1SweepAddressWithHttpInfo(address, sweepAddressRequest);
        return localVarResp.getData();
    }

    /**
     * Sweep address
     * Sweep funds from a single address
     * @param address Address that funds will be swept from (required)
     * @param sweepAddressRequest Request (required)
     * @return ApiResponse&lt;SweepAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SweepAddressResponse> v1SweepAddressWithHttpInfo(String address, SweepAddressRequest sweepAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = v1SweepAddressValidateBeforeCall(address, sweepAddressRequest, null);
        Type localVarReturnType = new TypeToken<SweepAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sweep address (asynchronously)
     * Sweep funds from a single address
     * @param address Address that funds will be swept from (required)
     * @param sweepAddressRequest Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1SweepAddressAsync(String address, SweepAddressRequest sweepAddressRequest, final ApiCallback<SweepAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1SweepAddressValidateBeforeCall(address, sweepAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<SweepAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
