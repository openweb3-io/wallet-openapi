/*
 * Wallet OpenAPI Documentation
 * This is a custody wallet service openapi server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.wallet.internal.api;

import io.openweb3.wallet.internal.ApiCallback;
import io.openweb3.wallet.internal.ApiClient;
import io.openweb3.wallet.internal.ApiException;
import io.openweb3.wallet.internal.ApiResponse;
import io.openweb3.wallet.internal.Configuration;
import io.openweb3.wallet.internal.Pair;
import io.openweb3.wallet.internal.ProgressRequestBody;
import io.openweb3.wallet.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.wallet.models.Address;
import io.openweb3.wallet.models.CursorPageAddress;
import io.openweb3.wallet.models.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressesApi {
    private ApiClient localVarApiClient;

    public AddressesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1AddressesList
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor The cursor to use for pagination. (optional)
     * @param limit The number of records to return default: 20 (optional)
     * @param type The type of address to retrieve. (optional)
     * @param walletId Unique system generated identifier of the wallet (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AddressesListCall(String currency, String cursor, Integer limit, String type, String walletId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walletId", walletId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "SignatureAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AddressesListValidateBeforeCall(String currency, String cursor, Integer limit, String type, String walletId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1AddressesListCall(currency, cursor, limit, type, walletId, _callback);
        return localVarCall;

    }

    /**
     * List all addresses
     * List of all available addresses.
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor The cursor to use for pagination. (optional)
     * @param limit The number of records to return default: 20 (optional)
     * @param type The type of address to retrieve. (optional)
     * @param walletId Unique system generated identifier of the wallet (optional)
     * @return CursorPageAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CursorPageAddress v1AddressesList(String currency, String cursor, Integer limit, String type, String walletId) throws ApiException {
        ApiResponse<CursorPageAddress> localVarResp = v1AddressesListWithHttpInfo(currency, cursor, limit, type, walletId);
        return localVarResp.getData();
    }

    /**
     * List all addresses
     * List of all available addresses.
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor The cursor to use for pagination. (optional)
     * @param limit The number of records to return default: 20 (optional)
     * @param type The type of address to retrieve. (optional)
     * @param walletId Unique system generated identifier of the wallet (optional)
     * @return ApiResponse&lt;CursorPageAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CursorPageAddress> v1AddressesListWithHttpInfo(String currency, String cursor, Integer limit, String type, String walletId) throws ApiException {
        okhttp3.Call localVarCall = v1AddressesListValidateBeforeCall(currency, cursor, limit, type, walletId, null);
        Type localVarReturnType = new TypeToken<CursorPageAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all addresses (asynchronously)
     * List of all available addresses.
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor The cursor to use for pagination. (optional)
     * @param limit The number of records to return default: 20 (optional)
     * @param type The type of address to retrieve. (optional)
     * @param walletId Unique system generated identifier of the wallet (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AddressesListAsync(String currency, String cursor, Integer limit, String type, String walletId, final ApiCallback<CursorPageAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AddressesListValidateBeforeCall(currency, cursor, limit, type, walletId, _callback);
        Type localVarReturnType = new TypeToken<CursorPageAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WalletsGetDepositAddress
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (required)
     * @param network chain network, if not specified, the default network of the currency will be used. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WalletsGetDepositAddressCall(String walletId, String currency, String network, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/wallets/{walletId}/deposit_address"
            .replaceAll("\\{" + "walletId" + "\\}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "SignatureAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WalletsGetDepositAddressValidateBeforeCall(String walletId, String currency, String network, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling v1WalletsGetDepositAddress(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling v1WalletsGetDepositAddress(Async)");
        }
        
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling v1WalletsGetDepositAddress(Async)");
        }
        

        okhttp3.Call localVarCall = v1WalletsGetDepositAddressCall(walletId, currency, network, _callback);
        return localVarCall;

    }

    /**
     * Get deposit address
     * Get wallet&#39;s deposit address
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (required)
     * @param network chain network, if not specified, the default network of the currency will be used. (required)
     * @return Address
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Address v1WalletsGetDepositAddress(String walletId, String currency, String network) throws ApiException {
        ApiResponse<Address> localVarResp = v1WalletsGetDepositAddressWithHttpInfo(walletId, currency, network);
        return localVarResp.getData();
    }

    /**
     * Get deposit address
     * Get wallet&#39;s deposit address
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (required)
     * @param network chain network, if not specified, the default network of the currency will be used. (required)
     * @return ApiResponse&lt;Address&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Address> v1WalletsGetDepositAddressWithHttpInfo(String walletId, String currency, String network) throws ApiException {
        okhttp3.Call localVarCall = v1WalletsGetDepositAddressValidateBeforeCall(walletId, currency, network, null);
        Type localVarReturnType = new TypeToken<Address>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get deposit address (asynchronously)
     * Get wallet&#39;s deposit address
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (required)
     * @param network chain network, if not specified, the default network of the currency will be used. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WalletsGetDepositAddressAsync(String walletId, String currency, String network, final ApiCallback<Address> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WalletsGetDepositAddressValidateBeforeCall(walletId, currency, network, _callback);
        Type localVarReturnType = new TypeToken<Address>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WalletsListDepositAddresses
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor Cursor (optional)
     * @param limit Limit, default is 20 (optional)
     * @param network chain network, if not specified, the default network of the currency will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WalletsListDepositAddressesCall(String walletId, String currency, String cursor, Integer limit, String network, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/wallets/{walletId}/deposit_addresses"
            .replaceAll("\\{" + "walletId" + "\\}", localVarApiClient.escapeString(walletId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "SignatureAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WalletsListDepositAddressesValidateBeforeCall(String walletId, String currency, String cursor, Integer limit, String network, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling v1WalletsListDepositAddresses(Async)");
        }
        

        okhttp3.Call localVarCall = v1WalletsListDepositAddressesCall(walletId, currency, cursor, limit, network, _callback);
        return localVarCall;

    }

    /**
     * List deposit addresses
     * List wallet&#39;s deposit addresses
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor Cursor (optional)
     * @param limit Limit, default is 20 (optional)
     * @param network chain network, if not specified, the default network of the currency will be used. (optional)
     * @return CursorPageAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CursorPageAddress v1WalletsListDepositAddresses(String walletId, String currency, String cursor, Integer limit, String network) throws ApiException {
        ApiResponse<CursorPageAddress> localVarResp = v1WalletsListDepositAddressesWithHttpInfo(walletId, currency, cursor, limit, network);
        return localVarResp.getData();
    }

    /**
     * List deposit addresses
     * List wallet&#39;s deposit addresses
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor Cursor (optional)
     * @param limit Limit, default is 20 (optional)
     * @param network chain network, if not specified, the default network of the currency will be used. (optional)
     * @return ApiResponse&lt;CursorPageAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CursorPageAddress> v1WalletsListDepositAddressesWithHttpInfo(String walletId, String currency, String cursor, Integer limit, String network) throws ApiException {
        okhttp3.Call localVarCall = v1WalletsListDepositAddressesValidateBeforeCall(walletId, currency, cursor, limit, network, null);
        Type localVarReturnType = new TypeToken<CursorPageAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deposit addresses (asynchronously)
     * List wallet&#39;s deposit addresses
     * @param walletId Wallet ID (required)
     * @param currency The code of currency used in the transaction (e.g., TON, USDT, USD, EUR, etc.). (optional)
     * @param cursor Cursor (optional)
     * @param limit Limit, default is 20 (optional)
     * @param network chain network, if not specified, the default network of the currency will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WalletsListDepositAddressesAsync(String walletId, String currency, String cursor, Integer limit, String network, final ApiCallback<CursorPageAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WalletsListDepositAddressesValidateBeforeCall(walletId, currency, cursor, limit, network, _callback);
        Type localVarReturnType = new TypeToken<CursorPageAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
