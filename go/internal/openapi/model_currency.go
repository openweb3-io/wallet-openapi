/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Currency struct for Currency
type Currency struct {
	// Is it depositable on-chain
	CanDeposit *bool `json:"can_deposit,omitempty"`
	// Is it transferable within the platform
	CanTransfer *bool `json:"can_transfer,omitempty"`
	// Is it withdrawable on-chain
	CanWithdraw *bool `json:"can_withdraw,omitempty"`
	// Id                string `json:\"id\"`                      // Unique identifier on the platform
	Code *string `json:"code,omitempty"`
	// Contract address (for token contracts, if applicable)
	ContractAddress *string `json:"contract_address,omitempty"`
	// Decimal precision
	Decimals *int32 `json:"decimals,omitempty"`
	// Currency logo URL
	Logo *string `json:"logo,omitempty"`
	// Maximum fee
	MaxFee *string `json:"max_fee,omitempty"`
	// Maximum fee for contract addresses
	MaxFeeForCtAddr *string `json:"max_fee_for_ct_addr,omitempty"`
	// Maximum withdraw amount per transaction
	MaxWithdrawAmount *string `json:"max_withdraw_amount,omitempty"`
	// Minimum deposit amount per transaction
	MinDepositAmount *string `json:"min_deposit_amount,omitempty"`
	// Minimum fee
	MinFee *string `json:"min_fee,omitempty"`
	// Minimum fee for contract addresses
	MinFeeForCtAddr *string `json:"min_fee_for_ct_addr,omitempty"`
	// Minimum withdraw amount per transaction
	MinWithdrawAmount *string `json:"min_withdraw_amount,omitempty"`
	// Currency name
	Name *string `json:"name,omitempty"`
	// Does it require a memo/note for transactions
	NeedMemo *bool `json:"need_memo,omitempty"`
	// Networks information
	Networks *[]CurrencyNetwork `json:"networks,omitempty"`
	// The number of decimals used by the currency
	Precision *int32 `json:"precision,omitempty"`
	// Participate in exchange rate calculation
	Rated *bool `json:"rated,omitempty"`
	// Currency symbol
	Symbol *string `json:"symbol,omitempty"`
}

// NewCurrency instantiates a new Currency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrency() *Currency {
	this := Currency{}
	return &this
}

// NewCurrencyWithDefaults instantiates a new Currency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyWithDefaults() *Currency {
	this := Currency{}
	return &this
}

// GetCanDeposit returns the CanDeposit field value if set, zero value otherwise.
func (o *Currency) GetCanDeposit() bool {
	if o == nil || o.CanDeposit == nil {
		var ret bool
		return ret
	}
	return *o.CanDeposit
}

// GetCanDepositOk returns a tuple with the CanDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetCanDepositOk() (*bool, bool) {
	if o == nil || o.CanDeposit == nil {
		return nil, false
	}
	return o.CanDeposit, true
}

// HasCanDeposit returns a boolean if a field has been set.
func (o *Currency) HasCanDeposit() bool {
	if o != nil && o.CanDeposit != nil {
		return true
	}

	return false
}

// SetCanDeposit gets a reference to the given bool and assigns it to the CanDeposit field.
func (o *Currency) SetCanDeposit(v bool) {
	o.CanDeposit = &v
}

// GetCanTransfer returns the CanTransfer field value if set, zero value otherwise.
func (o *Currency) GetCanTransfer() bool {
	if o == nil || o.CanTransfer == nil {
		var ret bool
		return ret
	}
	return *o.CanTransfer
}

// GetCanTransferOk returns a tuple with the CanTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetCanTransferOk() (*bool, bool) {
	if o == nil || o.CanTransfer == nil {
		return nil, false
	}
	return o.CanTransfer, true
}

// HasCanTransfer returns a boolean if a field has been set.
func (o *Currency) HasCanTransfer() bool {
	if o != nil && o.CanTransfer != nil {
		return true
	}

	return false
}

// SetCanTransfer gets a reference to the given bool and assigns it to the CanTransfer field.
func (o *Currency) SetCanTransfer(v bool) {
	o.CanTransfer = &v
}

// GetCanWithdraw returns the CanWithdraw field value if set, zero value otherwise.
func (o *Currency) GetCanWithdraw() bool {
	if o == nil || o.CanWithdraw == nil {
		var ret bool
		return ret
	}
	return *o.CanWithdraw
}

// GetCanWithdrawOk returns a tuple with the CanWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetCanWithdrawOk() (*bool, bool) {
	if o == nil || o.CanWithdraw == nil {
		return nil, false
	}
	return o.CanWithdraw, true
}

// HasCanWithdraw returns a boolean if a field has been set.
func (o *Currency) HasCanWithdraw() bool {
	if o != nil && o.CanWithdraw != nil {
		return true
	}

	return false
}

// SetCanWithdraw gets a reference to the given bool and assigns it to the CanWithdraw field.
func (o *Currency) SetCanWithdraw(v bool) {
	o.CanWithdraw = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Currency) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Currency) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Currency) SetCode(v string) {
	o.Code = &v
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *Currency) GetContractAddress() string {
	if o == nil || o.ContractAddress == nil {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetContractAddressOk() (*string, bool) {
	if o == nil || o.ContractAddress == nil {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *Currency) HasContractAddress() bool {
	if o != nil && o.ContractAddress != nil {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *Currency) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *Currency) GetDecimals() int32 {
	if o == nil || o.Decimals == nil {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetDecimalsOk() (*int32, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *Currency) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *Currency) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *Currency) GetLogo() string {
	if o == nil || o.Logo == nil {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetLogoOk() (*string, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *Currency) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *Currency) SetLogo(v string) {
	o.Logo = &v
}

// GetMaxFee returns the MaxFee field value if set, zero value otherwise.
func (o *Currency) GetMaxFee() string {
	if o == nil || o.MaxFee == nil {
		var ret string
		return ret
	}
	return *o.MaxFee
}

// GetMaxFeeOk returns a tuple with the MaxFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMaxFeeOk() (*string, bool) {
	if o == nil || o.MaxFee == nil {
		return nil, false
	}
	return o.MaxFee, true
}

// HasMaxFee returns a boolean if a field has been set.
func (o *Currency) HasMaxFee() bool {
	if o != nil && o.MaxFee != nil {
		return true
	}

	return false
}

// SetMaxFee gets a reference to the given string and assigns it to the MaxFee field.
func (o *Currency) SetMaxFee(v string) {
	o.MaxFee = &v
}

// GetMaxFeeForCtAddr returns the MaxFeeForCtAddr field value if set, zero value otherwise.
func (o *Currency) GetMaxFeeForCtAddr() string {
	if o == nil || o.MaxFeeForCtAddr == nil {
		var ret string
		return ret
	}
	return *o.MaxFeeForCtAddr
}

// GetMaxFeeForCtAddrOk returns a tuple with the MaxFeeForCtAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMaxFeeForCtAddrOk() (*string, bool) {
	if o == nil || o.MaxFeeForCtAddr == nil {
		return nil, false
	}
	return o.MaxFeeForCtAddr, true
}

// HasMaxFeeForCtAddr returns a boolean if a field has been set.
func (o *Currency) HasMaxFeeForCtAddr() bool {
	if o != nil && o.MaxFeeForCtAddr != nil {
		return true
	}

	return false
}

// SetMaxFeeForCtAddr gets a reference to the given string and assigns it to the MaxFeeForCtAddr field.
func (o *Currency) SetMaxFeeForCtAddr(v string) {
	o.MaxFeeForCtAddr = &v
}

// GetMaxWithdrawAmount returns the MaxWithdrawAmount field value if set, zero value otherwise.
func (o *Currency) GetMaxWithdrawAmount() string {
	if o == nil || o.MaxWithdrawAmount == nil {
		var ret string
		return ret
	}
	return *o.MaxWithdrawAmount
}

// GetMaxWithdrawAmountOk returns a tuple with the MaxWithdrawAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMaxWithdrawAmountOk() (*string, bool) {
	if o == nil || o.MaxWithdrawAmount == nil {
		return nil, false
	}
	return o.MaxWithdrawAmount, true
}

// HasMaxWithdrawAmount returns a boolean if a field has been set.
func (o *Currency) HasMaxWithdrawAmount() bool {
	if o != nil && o.MaxWithdrawAmount != nil {
		return true
	}

	return false
}

// SetMaxWithdrawAmount gets a reference to the given string and assigns it to the MaxWithdrawAmount field.
func (o *Currency) SetMaxWithdrawAmount(v string) {
	o.MaxWithdrawAmount = &v
}

// GetMinDepositAmount returns the MinDepositAmount field value if set, zero value otherwise.
func (o *Currency) GetMinDepositAmount() string {
	if o == nil || o.MinDepositAmount == nil {
		var ret string
		return ret
	}
	return *o.MinDepositAmount
}

// GetMinDepositAmountOk returns a tuple with the MinDepositAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMinDepositAmountOk() (*string, bool) {
	if o == nil || o.MinDepositAmount == nil {
		return nil, false
	}
	return o.MinDepositAmount, true
}

// HasMinDepositAmount returns a boolean if a field has been set.
func (o *Currency) HasMinDepositAmount() bool {
	if o != nil && o.MinDepositAmount != nil {
		return true
	}

	return false
}

// SetMinDepositAmount gets a reference to the given string and assigns it to the MinDepositAmount field.
func (o *Currency) SetMinDepositAmount(v string) {
	o.MinDepositAmount = &v
}

// GetMinFee returns the MinFee field value if set, zero value otherwise.
func (o *Currency) GetMinFee() string {
	if o == nil || o.MinFee == nil {
		var ret string
		return ret
	}
	return *o.MinFee
}

// GetMinFeeOk returns a tuple with the MinFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMinFeeOk() (*string, bool) {
	if o == nil || o.MinFee == nil {
		return nil, false
	}
	return o.MinFee, true
}

// HasMinFee returns a boolean if a field has been set.
func (o *Currency) HasMinFee() bool {
	if o != nil && o.MinFee != nil {
		return true
	}

	return false
}

// SetMinFee gets a reference to the given string and assigns it to the MinFee field.
func (o *Currency) SetMinFee(v string) {
	o.MinFee = &v
}

// GetMinFeeForCtAddr returns the MinFeeForCtAddr field value if set, zero value otherwise.
func (o *Currency) GetMinFeeForCtAddr() string {
	if o == nil || o.MinFeeForCtAddr == nil {
		var ret string
		return ret
	}
	return *o.MinFeeForCtAddr
}

// GetMinFeeForCtAddrOk returns a tuple with the MinFeeForCtAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMinFeeForCtAddrOk() (*string, bool) {
	if o == nil || o.MinFeeForCtAddr == nil {
		return nil, false
	}
	return o.MinFeeForCtAddr, true
}

// HasMinFeeForCtAddr returns a boolean if a field has been set.
func (o *Currency) HasMinFeeForCtAddr() bool {
	if o != nil && o.MinFeeForCtAddr != nil {
		return true
	}

	return false
}

// SetMinFeeForCtAddr gets a reference to the given string and assigns it to the MinFeeForCtAddr field.
func (o *Currency) SetMinFeeForCtAddr(v string) {
	o.MinFeeForCtAddr = &v
}

// GetMinWithdrawAmount returns the MinWithdrawAmount field value if set, zero value otherwise.
func (o *Currency) GetMinWithdrawAmount() string {
	if o == nil || o.MinWithdrawAmount == nil {
		var ret string
		return ret
	}
	return *o.MinWithdrawAmount
}

// GetMinWithdrawAmountOk returns a tuple with the MinWithdrawAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetMinWithdrawAmountOk() (*string, bool) {
	if o == nil || o.MinWithdrawAmount == nil {
		return nil, false
	}
	return o.MinWithdrawAmount, true
}

// HasMinWithdrawAmount returns a boolean if a field has been set.
func (o *Currency) HasMinWithdrawAmount() bool {
	if o != nil && o.MinWithdrawAmount != nil {
		return true
	}

	return false
}

// SetMinWithdrawAmount gets a reference to the given string and assigns it to the MinWithdrawAmount field.
func (o *Currency) SetMinWithdrawAmount(v string) {
	o.MinWithdrawAmount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Currency) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Currency) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Currency) SetName(v string) {
	o.Name = &v
}

// GetNeedMemo returns the NeedMemo field value if set, zero value otherwise.
func (o *Currency) GetNeedMemo() bool {
	if o == nil || o.NeedMemo == nil {
		var ret bool
		return ret
	}
	return *o.NeedMemo
}

// GetNeedMemoOk returns a tuple with the NeedMemo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetNeedMemoOk() (*bool, bool) {
	if o == nil || o.NeedMemo == nil {
		return nil, false
	}
	return o.NeedMemo, true
}

// HasNeedMemo returns a boolean if a field has been set.
func (o *Currency) HasNeedMemo() bool {
	if o != nil && o.NeedMemo != nil {
		return true
	}

	return false
}

// SetNeedMemo gets a reference to the given bool and assigns it to the NeedMemo field.
func (o *Currency) SetNeedMemo(v bool) {
	o.NeedMemo = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *Currency) GetNetworks() []CurrencyNetwork {
	if o == nil || o.Networks == nil {
		var ret []CurrencyNetwork
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetNetworksOk() (*[]CurrencyNetwork, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *Currency) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []CurrencyNetwork and assigns it to the Networks field.
func (o *Currency) SetNetworks(v []CurrencyNetwork) {
	o.Networks = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise.
func (o *Currency) GetPrecision() int32 {
	if o == nil || o.Precision == nil {
		var ret int32
		return ret
	}
	return *o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetPrecisionOk() (*int32, bool) {
	if o == nil || o.Precision == nil {
		return nil, false
	}
	return o.Precision, true
}

// HasPrecision returns a boolean if a field has been set.
func (o *Currency) HasPrecision() bool {
	if o != nil && o.Precision != nil {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given int32 and assigns it to the Precision field.
func (o *Currency) SetPrecision(v int32) {
	o.Precision = &v
}

// GetRated returns the Rated field value if set, zero value otherwise.
func (o *Currency) GetRated() bool {
	if o == nil || o.Rated == nil {
		var ret bool
		return ret
	}
	return *o.Rated
}

// GetRatedOk returns a tuple with the Rated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetRatedOk() (*bool, bool) {
	if o == nil || o.Rated == nil {
		return nil, false
	}
	return o.Rated, true
}

// HasRated returns a boolean if a field has been set.
func (o *Currency) HasRated() bool {
	if o != nil && o.Rated != nil {
		return true
	}

	return false
}

// SetRated gets a reference to the given bool and assigns it to the Rated field.
func (o *Currency) SetRated(v bool) {
	o.Rated = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Currency) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Currency) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Currency) SetSymbol(v string) {
	o.Symbol = &v
}

func (o Currency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanDeposit != nil {
		toSerialize["can_deposit"] = o.CanDeposit
	}
	if o.CanTransfer != nil {
		toSerialize["can_transfer"] = o.CanTransfer
	}
	if o.CanWithdraw != nil {
		toSerialize["can_withdraw"] = o.CanWithdraw
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.ContractAddress != nil {
		toSerialize["contract_address"] = o.ContractAddress
	}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	if o.MaxFee != nil {
		toSerialize["max_fee"] = o.MaxFee
	}
	if o.MaxFeeForCtAddr != nil {
		toSerialize["max_fee_for_ct_addr"] = o.MaxFeeForCtAddr
	}
	if o.MaxWithdrawAmount != nil {
		toSerialize["max_withdraw_amount"] = o.MaxWithdrawAmount
	}
	if o.MinDepositAmount != nil {
		toSerialize["min_deposit_amount"] = o.MinDepositAmount
	}
	if o.MinFee != nil {
		toSerialize["min_fee"] = o.MinFee
	}
	if o.MinFeeForCtAddr != nil {
		toSerialize["min_fee_for_ct_addr"] = o.MinFeeForCtAddr
	}
	if o.MinWithdrawAmount != nil {
		toSerialize["min_withdraw_amount"] = o.MinWithdrawAmount
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NeedMemo != nil {
		toSerialize["need_memo"] = o.NeedMemo
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.Precision != nil {
		toSerialize["precision"] = o.Precision
	}
	if o.Rated != nil {
		toSerialize["rated"] = o.Rated
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableCurrency struct {
	value *Currency
	isSet bool
}

func (v NullableCurrency) Get() *Currency {
	return v.value
}

func (v *NullableCurrency) Set(val *Currency) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrency(val *Currency) *NullableCurrency {
	return &NullableCurrency{value: val, isSet: true}
}

func (v NullableCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


