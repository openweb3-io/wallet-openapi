/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Exchange struct for Exchange
type Exchange struct {
	// The create time
	CreatedAt string `json:"created_at"`
	// The amount of the fee charged for this exchange, denominated in the `fee_currency`
	FeeAmount string `json:"fee_amount"`
	// The currency in which the fee is denominated. For example, 'TON'.
	FeeCurrency string `json:"fee_currency"`
	// The currency code of fiat currency, e.g.: USD
	FiatCurrency string `json:"fiat_currency"`
	// The amount of the source currency being sent. For example, 0.1 TON.
	FromAmount string `json:"from_amount"`
	// The currency being sent. In this case, it is 'TON'.
	FromCurrency string `json:"from_currency"`
	// A unique identifier for the exchange.
	Id string `json:"id"`
	// The exchange rate applied during the exchange. For example, the rate is 7.11116.
	Rate float32 `json:"rate"`
	// The amount of the target currency received. For example, 0.711116 USDT.
	ToAmount string `json:"to_amount"`
	// The currency being received. In this case, it is 'USDT'.
	ToCurrency string `json:"to_currency"`
	// The validity period for the exchange
	Ttl int32 `json:"ttl"`
	// The update time
	UpdatedAt string `json:"updated_at"`
	// The walletID that the exchange belong to
	WalletId string `json:"wallet_id"`
}

// NewExchange instantiates a new Exchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchange(createdAt string, feeAmount string, feeCurrency string, fiatCurrency string, fromAmount string, fromCurrency string, id string, rate float32, toAmount string, toCurrency string, ttl int32, updatedAt string, walletId string) *Exchange {
	this := Exchange{}
	this.CreatedAt = createdAt
	this.FeeAmount = feeAmount
	this.FeeCurrency = feeCurrency
	this.FiatCurrency = fiatCurrency
	this.FromAmount = fromAmount
	this.FromCurrency = fromCurrency
	this.Id = id
	this.Rate = rate
	this.ToAmount = toAmount
	this.ToCurrency = toCurrency
	this.Ttl = ttl
	this.UpdatedAt = updatedAt
	this.WalletId = walletId
	return &this
}

// NewExchangeWithDefaults instantiates a new Exchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeWithDefaults() *Exchange {
	this := Exchange{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *Exchange) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetCreatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Exchange) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetFeeAmount returns the FeeAmount field value
func (o *Exchange) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetFeeAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *Exchange) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetFeeCurrency returns the FeeCurrency field value
func (o *Exchange) GetFeeCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeCurrency
}

// GetFeeCurrencyOk returns a tuple with the FeeCurrency field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetFeeCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FeeCurrency, true
}

// SetFeeCurrency sets field value
func (o *Exchange) SetFeeCurrency(v string) {
	o.FeeCurrency = v
}

// GetFiatCurrency returns the FiatCurrency field value
func (o *Exchange) GetFiatCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FiatCurrency
}

// GetFiatCurrencyOk returns a tuple with the FiatCurrency field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetFiatCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FiatCurrency, true
}

// SetFiatCurrency sets field value
func (o *Exchange) SetFiatCurrency(v string) {
	o.FiatCurrency = v
}

// GetFromAmount returns the FromAmount field value
func (o *Exchange) GetFromAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetFromAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromAmount, true
}

// SetFromAmount sets field value
func (o *Exchange) SetFromAmount(v string) {
	o.FromAmount = v
}

// GetFromCurrency returns the FromCurrency field value
func (o *Exchange) GetFromCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromCurrency
}

// GetFromCurrencyOk returns a tuple with the FromCurrency field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetFromCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromCurrency, true
}

// SetFromCurrency sets field value
func (o *Exchange) SetFromCurrency(v string) {
	o.FromCurrency = v
}

// GetId returns the Id field value
func (o *Exchange) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Exchange) SetId(v string) {
	o.Id = v
}

// GetRate returns the Rate field value
func (o *Exchange) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetRateOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *Exchange) SetRate(v float32) {
	o.Rate = v
}

// GetToAmount returns the ToAmount field value
func (o *Exchange) GetToAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetToAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAmount, true
}

// SetToAmount sets field value
func (o *Exchange) SetToAmount(v string) {
	o.ToAmount = v
}

// GetToCurrency returns the ToCurrency field value
func (o *Exchange) GetToCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCurrency
}

// GetToCurrencyOk returns a tuple with the ToCurrency field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetToCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToCurrency, true
}

// SetToCurrency sets field value
func (o *Exchange) SetToCurrency(v string) {
	o.ToCurrency = v
}

// GetTtl returns the Ttl field value
func (o *Exchange) GetTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetTtlOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *Exchange) SetTtl(v int32) {
	o.Ttl = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Exchange) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetUpdatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Exchange) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetWalletId returns the WalletId field value
func (o *Exchange) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Exchange) GetWalletIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Exchange) SetWalletId(v string) {
	o.WalletId = v
}

func (o Exchange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["fee_amount"] = o.FeeAmount
	}
	if true {
		toSerialize["fee_currency"] = o.FeeCurrency
	}
	if true {
		toSerialize["fiat_currency"] = o.FiatCurrency
	}
	if true {
		toSerialize["from_amount"] = o.FromAmount
	}
	if true {
		toSerialize["from_currency"] = o.FromCurrency
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["rate"] = o.Rate
	}
	if true {
		toSerialize["to_amount"] = o.ToAmount
	}
	if true {
		toSerialize["to_currency"] = o.ToCurrency
	}
	if true {
		toSerialize["ttl"] = o.Ttl
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["wallet_id"] = o.WalletId
	}
	return json.Marshal(toSerialize)
}

type NullableExchange struct {
	value *Exchange
	isSet bool
}

func (v NullableExchange) Get() *Exchange {
	return v.value
}

func (v *NullableExchange) Set(val *Exchange) {
	v.value = val
	v.isSet = true
}

func (v NullableExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchange(val *Exchange) *NullableExchange {
	return &NullableExchange{value: val, isSet: true}
}

func (v NullableExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


