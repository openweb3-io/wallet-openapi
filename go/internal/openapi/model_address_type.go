/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddressType the model 'AddressType'
type AddressType string

// List of AddressType
const (
	ADDRESSTYPE_AddressTypeCollect AddressType = "COLLECT"
	ADDRESSTYPE_AddressTypeDeposit AddressType = "DEPOSIT"
)

var allowedAddressTypeEnumValues = []AddressType{
	"COLLECT",
	"DEPOSIT",
}

func (v *AddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddressType(value)
	for _, existing := range allowedAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddressType", value)
}

// NewAddressTypeFromValue returns a pointer to a valid AddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddressTypeFromValue(v string) (*AddressType, error) {
	ev := AddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddressType: valid values are %v", v, allowedAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddressType) IsValid() bool {
	for _, existing := range allowedAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddressType value
func (v AddressType) Ptr() *AddressType {
	return &v
}

type NullableAddressType struct {
	value *AddressType
	isSet bool
}

func (v NullableAddressType) Get() *AddressType {
	return v.value
}

func (v *NullableAddressType) Set(val *AddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressType(val *AddressType) *NullableAddressType {
	return &NullableAddressType{value: val, isSet: true}
}

func (v NullableAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

