/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateEndpoint struct for UpdateEndpoint
type UpdateEndpoint struct {
	// The description of the webhook endpoint
	Description *string `json:"description,omitempty"`
	// The disabled of the webhook endpoint
	Disabled *bool `json:"disabled,omitempty"`
	// The filter event types of the webhook endpoint
	FilterTypes []string `json:"filter_types"`
	// The headers of the webhook endpoint
	Headers map[string]string `json:"headers,omitempty"`
	// The metadata of the webhook endpoint
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The uid of the webhook endpoint
	Uid *string `json:"uid,omitempty"`
	// The url of the webhook endpoint
	Url *string `json:"url,omitempty"`
}

// NewUpdateEndpoint instantiates a new UpdateEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEndpoint(filterTypes []string) *UpdateEndpoint {
	this := UpdateEndpoint{}
	this.FilterTypes = filterTypes
	return &this
}

// NewUpdateEndpointWithDefaults instantiates a new UpdateEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEndpointWithDefaults() *UpdateEndpoint {
	this := UpdateEndpoint{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateEndpoint) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UpdateEndpoint) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetFilterTypes returns the FilterTypes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *UpdateEndpoint) GetFilterTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FilterTypes
}

// GetFilterTypesOk returns a tuple with the FilterTypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEndpoint) GetFilterTypesOk() (*[]string, bool) {
	if o == nil || o.FilterTypes == nil {
		return nil, false
	}
	return &o.FilterTypes, true
}

// SetFilterTypes sets field value
func (o *UpdateEndpoint) SetFilterTypes(v []string) {
	o.FilterTypes = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEndpoint) GetHeaders() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEndpoint) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *UpdateEndpoint) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEndpoint) GetMetadata() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEndpoint) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UpdateEndpoint) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UpdateEndpoint) SetUid(v string) {
	o.Uid = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateEndpoint) SetUrl(v string) {
	o.Url = &v
}

func (o UpdateEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.FilterTypes != nil {
		toSerialize["filter_types"] = o.FilterTypes
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateEndpoint struct {
	value *UpdateEndpoint
	isSet bool
}

func (v NullableUpdateEndpoint) Get() *UpdateEndpoint {
	return v.value
}

func (v *NullableUpdateEndpoint) Set(val *UpdateEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEndpoint(val *UpdateEndpoint) *NullableUpdateEndpoint {
	return &NullableUpdateEndpoint{value: val, isSet: true}
}

func (v NullableUpdateEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


