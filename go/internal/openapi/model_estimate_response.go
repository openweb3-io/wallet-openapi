/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EstimateResponse struct for EstimateResponse
type EstimateResponse struct {
	// The amount of the base currency you want to convert
	BaseAmount *string `json:"base_amount,omitempty"`
	// The currency code of the base currency that you want to convert from
	BaseCurrency *string `json:"base_currency,omitempty"`
	// The exchange rate from the base currency to the target currency
	Rate *float32 `json:"rate,omitempty"`
	// The amount of the target currency you will receive after the conversion
	ToAmount *string `json:"to_amount,omitempty"`
	// The currency code of the target currency that you want to convert to
	ToCurrency *string `json:"to_currency,omitempty"`
}

// NewEstimateResponse instantiates a new EstimateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateResponse() *EstimateResponse {
	this := EstimateResponse{}
	return &this
}

// NewEstimateResponseWithDefaults instantiates a new EstimateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateResponseWithDefaults() *EstimateResponse {
	this := EstimateResponse{}
	return &this
}

// GetBaseAmount returns the BaseAmount field value if set, zero value otherwise.
func (o *EstimateResponse) GetBaseAmount() string {
	if o == nil || o.BaseAmount == nil {
		var ret string
		return ret
	}
	return *o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateResponse) GetBaseAmountOk() (*string, bool) {
	if o == nil || o.BaseAmount == nil {
		return nil, false
	}
	return o.BaseAmount, true
}

// HasBaseAmount returns a boolean if a field has been set.
func (o *EstimateResponse) HasBaseAmount() bool {
	if o != nil && o.BaseAmount != nil {
		return true
	}

	return false
}

// SetBaseAmount gets a reference to the given string and assigns it to the BaseAmount field.
func (o *EstimateResponse) SetBaseAmount(v string) {
	o.BaseAmount = &v
}

// GetBaseCurrency returns the BaseCurrency field value if set, zero value otherwise.
func (o *EstimateResponse) GetBaseCurrency() string {
	if o == nil || o.BaseCurrency == nil {
		var ret string
		return ret
	}
	return *o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateResponse) GetBaseCurrencyOk() (*string, bool) {
	if o == nil || o.BaseCurrency == nil {
		return nil, false
	}
	return o.BaseCurrency, true
}

// HasBaseCurrency returns a boolean if a field has been set.
func (o *EstimateResponse) HasBaseCurrency() bool {
	if o != nil && o.BaseCurrency != nil {
		return true
	}

	return false
}

// SetBaseCurrency gets a reference to the given string and assigns it to the BaseCurrency field.
func (o *EstimateResponse) SetBaseCurrency(v string) {
	o.BaseCurrency = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *EstimateResponse) GetRate() float32 {
	if o == nil || o.Rate == nil {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateResponse) GetRateOk() (*float32, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *EstimateResponse) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *EstimateResponse) SetRate(v float32) {
	o.Rate = &v
}

// GetToAmount returns the ToAmount field value if set, zero value otherwise.
func (o *EstimateResponse) GetToAmount() string {
	if o == nil || o.ToAmount == nil {
		var ret string
		return ret
	}
	return *o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateResponse) GetToAmountOk() (*string, bool) {
	if o == nil || o.ToAmount == nil {
		return nil, false
	}
	return o.ToAmount, true
}

// HasToAmount returns a boolean if a field has been set.
func (o *EstimateResponse) HasToAmount() bool {
	if o != nil && o.ToAmount != nil {
		return true
	}

	return false
}

// SetToAmount gets a reference to the given string and assigns it to the ToAmount field.
func (o *EstimateResponse) SetToAmount(v string) {
	o.ToAmount = &v
}

// GetToCurrency returns the ToCurrency field value if set, zero value otherwise.
func (o *EstimateResponse) GetToCurrency() string {
	if o == nil || o.ToCurrency == nil {
		var ret string
		return ret
	}
	return *o.ToCurrency
}

// GetToCurrencyOk returns a tuple with the ToCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateResponse) GetToCurrencyOk() (*string, bool) {
	if o == nil || o.ToCurrency == nil {
		return nil, false
	}
	return o.ToCurrency, true
}

// HasToCurrency returns a boolean if a field has been set.
func (o *EstimateResponse) HasToCurrency() bool {
	if o != nil && o.ToCurrency != nil {
		return true
	}

	return false
}

// SetToCurrency gets a reference to the given string and assigns it to the ToCurrency field.
func (o *EstimateResponse) SetToCurrency(v string) {
	o.ToCurrency = &v
}

func (o EstimateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BaseAmount != nil {
		toSerialize["base_amount"] = o.BaseAmount
	}
	if o.BaseCurrency != nil {
		toSerialize["base_currency"] = o.BaseCurrency
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.ToAmount != nil {
		toSerialize["to_amount"] = o.ToAmount
	}
	if o.ToCurrency != nil {
		toSerialize["to_currency"] = o.ToCurrency
	}
	return json.Marshal(toSerialize)
}

type NullableEstimateResponse struct {
	value *EstimateResponse
	isSet bool
}

func (v NullableEstimateResponse) Get() *EstimateResponse {
	return v.value
}

func (v *NullableEstimateResponse) Set(val *EstimateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateResponse(val *EstimateResponse) *NullableEstimateResponse {
	return &NullableEstimateResponse{value: val, isSet: true}
}

func (v NullableEstimateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


