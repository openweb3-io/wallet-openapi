/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExchangeCurrencyPairs struct for ExchangeCurrencyPairs
type ExchangeCurrencyPairs struct {
	// The currency code of source currency, e.g.: TON
	FromCurrency *string `json:"from_currency,omitempty"`
	// The currency code list of target currency, e.g.: USDT
	ToCurrencies *[]string `json:"to_currencies,omitempty"`
}

// NewExchangeCurrencyPairs instantiates a new ExchangeCurrencyPairs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeCurrencyPairs() *ExchangeCurrencyPairs {
	this := ExchangeCurrencyPairs{}
	return &this
}

// NewExchangeCurrencyPairsWithDefaults instantiates a new ExchangeCurrencyPairs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeCurrencyPairsWithDefaults() *ExchangeCurrencyPairs {
	this := ExchangeCurrencyPairs{}
	return &this
}

// GetFromCurrency returns the FromCurrency field value if set, zero value otherwise.
func (o *ExchangeCurrencyPairs) GetFromCurrency() string {
	if o == nil || o.FromCurrency == nil {
		var ret string
		return ret
	}
	return *o.FromCurrency
}

// GetFromCurrencyOk returns a tuple with the FromCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeCurrencyPairs) GetFromCurrencyOk() (*string, bool) {
	if o == nil || o.FromCurrency == nil {
		return nil, false
	}
	return o.FromCurrency, true
}

// HasFromCurrency returns a boolean if a field has been set.
func (o *ExchangeCurrencyPairs) HasFromCurrency() bool {
	if o != nil && o.FromCurrency != nil {
		return true
	}

	return false
}

// SetFromCurrency gets a reference to the given string and assigns it to the FromCurrency field.
func (o *ExchangeCurrencyPairs) SetFromCurrency(v string) {
	o.FromCurrency = &v
}

// GetToCurrencies returns the ToCurrencies field value if set, zero value otherwise.
func (o *ExchangeCurrencyPairs) GetToCurrencies() []string {
	if o == nil || o.ToCurrencies == nil {
		var ret []string
		return ret
	}
	return *o.ToCurrencies
}

// GetToCurrenciesOk returns a tuple with the ToCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeCurrencyPairs) GetToCurrenciesOk() (*[]string, bool) {
	if o == nil || o.ToCurrencies == nil {
		return nil, false
	}
	return o.ToCurrencies, true
}

// HasToCurrencies returns a boolean if a field has been set.
func (o *ExchangeCurrencyPairs) HasToCurrencies() bool {
	if o != nil && o.ToCurrencies != nil {
		return true
	}

	return false
}

// SetToCurrencies gets a reference to the given []string and assigns it to the ToCurrencies field.
func (o *ExchangeCurrencyPairs) SetToCurrencies(v []string) {
	o.ToCurrencies = &v
}

func (o ExchangeCurrencyPairs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromCurrency != nil {
		toSerialize["from_currency"] = o.FromCurrency
	}
	if o.ToCurrencies != nil {
		toSerialize["to_currencies"] = o.ToCurrencies
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeCurrencyPairs struct {
	value *ExchangeCurrencyPairs
	isSet bool
}

func (v NullableExchangeCurrencyPairs) Get() *ExchangeCurrencyPairs {
	return v.value
}

func (v *NullableExchangeCurrencyPairs) Set(val *ExchangeCurrencyPairs) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeCurrencyPairs) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeCurrencyPairs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeCurrencyPairs(val *ExchangeCurrencyPairs) *NullableExchangeCurrencyPairs {
	return &NullableExchangeCurrencyPairs{value: val, isSet: true}
}

func (v NullableExchangeCurrencyPairs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeCurrencyPairs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


