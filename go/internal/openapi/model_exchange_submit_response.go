/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExchangeSubmitResponse struct for ExchangeSubmitResponse
type ExchangeSubmitResponse struct {
	// The exchange id
	ExchangeId *string `json:"exchange_id,omitempty"`
}

// NewExchangeSubmitResponse instantiates a new ExchangeSubmitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeSubmitResponse() *ExchangeSubmitResponse {
	this := ExchangeSubmitResponse{}
	return &this
}

// NewExchangeSubmitResponseWithDefaults instantiates a new ExchangeSubmitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeSubmitResponseWithDefaults() *ExchangeSubmitResponse {
	this := ExchangeSubmitResponse{}
	return &this
}

// GetExchangeId returns the ExchangeId field value if set, zero value otherwise.
func (o *ExchangeSubmitResponse) GetExchangeId() string {
	if o == nil || o.ExchangeId == nil {
		var ret string
		return ret
	}
	return *o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeSubmitResponse) GetExchangeIdOk() (*string, bool) {
	if o == nil || o.ExchangeId == nil {
		return nil, false
	}
	return o.ExchangeId, true
}

// HasExchangeId returns a boolean if a field has been set.
func (o *ExchangeSubmitResponse) HasExchangeId() bool {
	if o != nil && o.ExchangeId != nil {
		return true
	}

	return false
}

// SetExchangeId gets a reference to the given string and assigns it to the ExchangeId field.
func (o *ExchangeSubmitResponse) SetExchangeId(v string) {
	o.ExchangeId = &v
}

func (o ExchangeSubmitResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExchangeId != nil {
		toSerialize["exchange_id"] = o.ExchangeId
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeSubmitResponse struct {
	value *ExchangeSubmitResponse
	isSet bool
}

func (v NullableExchangeSubmitResponse) Get() *ExchangeSubmitResponse {
	return v.value
}

func (v *NullableExchangeSubmitResponse) Set(val *ExchangeSubmitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeSubmitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeSubmitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeSubmitResponse(val *ExchangeSubmitResponse) *NullableExchangeSubmitResponse {
	return &NullableExchangeSubmitResponse{value: val, isSet: true}
}

func (v NullableExchangeSubmitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeSubmitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


