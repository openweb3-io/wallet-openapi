/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransactionDirection the model 'TransactionDirection'
type TransactionDirection string

// List of TransactionDirection
const (
	TRANSACTIONDIRECTION_TransactionDirectionOut TransactionDirection = "OUT"
	TRANSACTIONDIRECTION_TransactionDirectionIn TransactionDirection = "IN"
)

var allowedTransactionDirectionEnumValues = []TransactionDirection{
	"OUT",
	"IN",
}

func (v *TransactionDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionDirection(value)
	for _, existing := range allowedTransactionDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionDirection", value)
}

// NewTransactionDirectionFromValue returns a pointer to a valid TransactionDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionDirectionFromValue(v string) (*TransactionDirection, error) {
	ev := TransactionDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionDirection: valid values are %v", v, allowedTransactionDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionDirection) IsValid() bool {
	for _, existing := range allowedTransactionDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionDirection value
func (v TransactionDirection) Ptr() *TransactionDirection {
	return &v
}

type NullableTransactionDirection struct {
	value *TransactionDirection
	isSet bool
}

func (v NullableTransactionDirection) Get() *TransactionDirection {
	return v.value
}

func (v *NullableTransactionDirection) Set(val *TransactionDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDirection(val *TransactionDirection) *NullableTransactionDirection {
	return &NullableTransactionDirection{value: val, isSet: true}
}

func (v NullableTransactionDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

