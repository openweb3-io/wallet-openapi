/*
 * Wallet OpenAPI Documentation
 *
 * This is a custody wallet service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateWebhook struct for UpdateWebhook
type UpdateWebhook struct {
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	EventTypes []string `json:"eventTypes"`
	Headers map[string]string `json:"headers"`
	Metadata map[string]interface{} `json:"metadata"`
	Uid *string `json:"uid,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewUpdateWebhook instantiates a new UpdateWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhook(eventTypes []string, headers map[string]string, metadata map[string]interface{}) *UpdateWebhook {
	this := UpdateWebhook{}
	this.EventTypes = eventTypes
	this.Headers = headers
	this.Metadata = metadata
	return &this
}

// NewUpdateWebhookWithDefaults instantiates a new UpdateWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookWithDefaults() *UpdateWebhook {
	this := UpdateWebhook{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateWebhook) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateWebhook) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateWebhook) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UpdateWebhook) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UpdateWebhook) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UpdateWebhook) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetEventTypes returns the EventTypes field value
func (o *UpdateWebhook) GetEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetEventTypesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventTypes, true
}

// SetEventTypes sets field value
func (o *UpdateWebhook) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetHeaders returns the Headers field value
func (o *UpdateWebhook) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetHeadersOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *UpdateWebhook) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetMetadata returns the Metadata field value
func (o *UpdateWebhook) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *UpdateWebhook) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UpdateWebhook) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UpdateWebhook) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UpdateWebhook) SetUid(v string) {
	o.Uid = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateWebhook) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhook) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateWebhook) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateWebhook) SetUrl(v string) {
	o.Url = &v
}

func (o UpdateWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if true {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if true {
		toSerialize["headers"] = o.Headers
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateWebhook struct {
	value *UpdateWebhook
	isSet bool
}

func (v NullableUpdateWebhook) Get() *UpdateWebhook {
	return v.value
}

func (v *NullableUpdateWebhook) Set(val *UpdateWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhook(val *UpdateWebhook) *NullableUpdateWebhook {
	return &NullableUpdateWebhook{value: val, isSet: true}
}

func (v NullableUpdateWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


